import java.io.*;
import java.util.*;

class DFSAlgo {
	private int N; 

	private LinkedList<Integer> adj[];

	// Constructor
	@SuppressWarnings("unchecked") DFSAlgo(int v)
	{
		N = v;
		adj = new LinkedList[v];
		for (int i = 0; i < v; ++i)
			adj[i] = new LinkedList();
	}

	
	void addEdge(int v, int w)
	{
		adj[v].add(w); // Add w to v's list.
	}

	
	void DFSUtil(int v, boolean visited[])
	{
		
		visited[v] = true;
		System.out.print(v + " ");

		
		Iterator<Integer> i = adj[v].listIterator();
		while (i.hasNext()) {
			int n = i.next();
			if (!visited[n])
				DFSUtil(n, visited);
		}
	}

	
	void DFS()
	{
		
		boolean visited[] = new boolean[N];

		
		for (int i = 0; i < N; ++i)
			if (visited[i] == false)
				DFSUtil(i, visited);
	}


	public static void main(String args[])
	{
		DFSAlgo G1 = new DFSAlgo(7);

	          	G1.addEdge(0, 1);
                G1.addEdge(0, 2);
                G1.addEdge(1, 3);
                G1.addEdge(2, 4);
                G1.addEdge(4, 5);
                G1.addEdge(5, 6);

		System.out.println("Depth First Traversal is ");

		G1.DFS();
	}
}
