//Transport.java
package factorypatterndemo;


public abstract class Transport {
    
    
 int rate = 0;
    public int  getRate() {
        return rate;
    }  
}

//car.java
package factorypatterndemo;


public class Car extends Transport {
    int  rate = 10;
    public int getRate() {
        return rate;
    }
}

//van.java
package factorypatterndemo;


public class Van extends Transport {
  int  rate = 5;
    public int getRate() {
        return rate; 
}
}
//cab.java

package factorypatterndemo;


public class Cab extends Transport{
      int  rate = 15;
    public int getRate() {
        return rate;
    }
}

//uberFactory.java


package factorypatterndemo;


public class UberFactory {
    public Transport getTransport(String type) {
        switch(type) {
            case "CAR" :
                return new Car();
            case "VAN" :
                return new Van();
            case "CAB" :
                return new Cab();   
            default:
                return null;
        }
    }
}

//uberservice.java

package factorypatterndemo;


public class UberService {
    private static UberService OInstance;

  
    private UberService() {
    }

   
    synchronized public static UberService getInstance() {

        if (OInstance == null) {
         
            synchronized (UberService.class) {
                if (OInstance == null) {
                    OInstance = new UberService();
                }
            }
        }
        return OInstance;
    }

    public Transport getUber(String type) {
        return new UberFactory().getTransport(type);
    }
}

//FactoryMethodDemo.java

package factorypatterndemo;

public class FactorypatternDemo {

    public static void main(String[] args) {
      Transport t1 = UberService.getInstance().getUber("CAR");
        System.out.println(t1.getRate());

        Transport t2 = UberService.getInstance().getUber("VAN");
        System.out.println(t2.getRate());
         Transport t3 = UberService.getInstance().getUber("CAB");
        System.out.println(t3.getRate());
    }
    
}
